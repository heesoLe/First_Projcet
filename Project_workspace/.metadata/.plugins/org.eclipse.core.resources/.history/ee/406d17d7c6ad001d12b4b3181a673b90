package com.student.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.swing.table.DefaultTableModel;

import com.student.vo.MemberVO;

public class MypageDAO {
	
	public MemberVO vo = new MemberVO();

   // 모든 DAO 공통 설정 사항
   // DB관련 필수 멤버변수 선언
   Connection con; // DB연결 con
   Statement st; // 쿼리문 수행 st
   PreparedStatement pt; // 쿼리문 수행 ps
   ResultSet rs; // 검색 결과 레코드를 저장할 rs
   
   // 생성자에서 DB연결
   public MypageDAO() {
      try {
         Class.forName("oracle.jdbc.OracleDriver");
         con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "STUDENT", "1234");
      } catch(ClassNotFoundException e) {
         System.out.println(e + "=> 로드 fail");
      } catch(SQLException e) {
         System.out.println(e + "=> 연결 fail");
      } // end try catch
   } // end MypageDAO()
   
   
   // MypageDAO 기능 구현(selectAll, update, select, delete, dbClose)
   // 1. DB에 저장된 모든 회원 정보 모두 조회 / ArrayList
   public List<MemberVO> getMemberList() {
      List<MemberVO> list = new ArrayList<>();
      
      try {
         pt = con.prepareStatement("select * from student"); // student테이블의 모든 자료를 리스트에 넣어서 출력
         rs = pt.executeQuery(); // 검색 쿼리문 수행 후 결과 레코드를 rs에 저장
         while(rs.next()) {
            MemberVO vo = new MemberVO();
            vo.setUser_no(rs.getInt("user_no")); // user_no 컬럼 레코드를 숫자형으로 가져와서 저장
            vo.setUser_name(rs.getString("user_name")); // user_name 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_id(rs.getString("user_id")); // user_id 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_pwd(rs.getString("user_pwd")); // user_pwd 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_email(rs.getString("user_email")); // user_email 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_phone(rs.getString("user_phone")); // user_phone 컬럼 레코드를 문자열로 가져와서 저장
            
            vo.setUser_status(rs.getString("user_status")); // user_ 컬럼 레코드를 문자열로 가져와서 저장
            
            list.add(vo); // 컬렉션에 추가 / 컬렉션 = ArrayList<>()
         } // end while
         
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         try {
            if(rs != null) {
               rs.close();
            }
            if(pt != null) {
               pt.close();
            }
            if(con != null) {
               con.close();
            }
         } catch (Exception e) {
            e.printStackTrace();
         } // end inner try catch
      } // end outer try catch finally
      return list;
   } // end getMemberList()
   
   // 1. 해당하는 회원 정보 조회(내 정보 수정 창에 나타내기 위함)
   public boolean selectUserInfo(MemberVO vo) {
      boolean result = true;
      
      try {
         pt = con.prepareStatement("select * from student"); // student테이블의 모든 자료를 리스트에 넣어서 출력
         rs = pt.executeQuery(); // 검색 쿼리문 수행 후 결과 레코드를 rs에 저장
         while(rs.next()) { // 해당하는 값이 모두 담겨 있다면 true를 반환, 아닐시 false를 반환
            vo.setUser_no(rs.getInt("user_no")); // user_no 컬럼 레코드를 숫자형으로 가져와서 저장
            vo.setUser_name(rs.getString("user_name")); // user_name 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_id(rs.getString("user_id")); // user_id 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_pwd(rs.getString("user_pwd")); // user_pwd 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_email(rs.getString("user_email")); // user_email 컬럼 레코드를 문자열로 가져와서 저장
            vo.setUser_phone(rs.getString("user_phone")); // user_phone 컬럼 레코드를 문자열로 가져와서 저장
            
            vo.setUser_status(rs.getString("user_status")); // user_ 컬럼 레코드를 문자열로 가져와서 저장
         } // end while
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         try {
            if(rs != null) {
               rs.close();
            }
            if(pt != null) {
               pt.close();
            }
            if(con != null) {
               con.close();
            }
         } catch (Exception e) {
            e.printStackTrace();
         } // end inner try catch
      } // end outer try catch finally
      
      return result; // true or false값으로 받음. 참고하여 Mypage의 ActionListener 구현
   } // end selectUserInfo()
   
   
   // 2. 회원 정보 수정(내 정보 수정시 DB에 변경 내용 저장) / Update
   public int modifyUser(MemberVO vo) {
      int re = -1;
         
      try {
         pt = con.prepareStatement("update student set user_name=?, user_pwd=?, user_email=?, user_phone=? user_birthday=? where user_id=?"); // 아이디를 기준으로 비밀번호, 이름, 연락처 수정 쿼리문
         pt.setString(1, vo.getUser_name().trim());
         pt.setString(2, vo.getUser_pwd().trim());
         pt.setString(3, vo.getUser_email().trim());
         pt.setString(4, vo.getUser_phone().trim());
         
         pt.setString(6, vo.getUser_id().trim());
         
         re = pt.executeUpdate(); // 수정 쿼리문 성공후 성공한 레코드 행의 개수를 반환
         
      } catch(Exception e) {
         e.printStackTrace();
      } finally {
         dbClose();
      } // end try catch finally
      
      return re;
   } // end modifyUser()
   
   
   // 3. 아이디, 비밀번호 조회(회원 탈퇴 창에서 아이디, 비밀번호를 조회) / select
   public int selectUser(String user_id, String user_pwd) {
      int re = -1;
      
      try {
         pt = con.prepareStatement("select * from student where user_id=? and user_pwd=?"); // student테이블의 모든 자료를 리스트에 넣어서 출력
         pt.setString(1, user_id);
         pt.setString(2, user_pwd);
         rs = pt.executeQuery(); // 검색 쿼리문 수행 후 결과 레코드를 rs에 저장
         while(rs.next()) {
            rs.getString("user_id");
            rs.getString("user_pwd");            
         } // end while
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         try {
            if(rs != null) {
               rs.close();
            }
            if(pt != null) {
               pt.close();
            }
            if(con != null) {
               con.close();
            }
         } catch (Exception e) {
            e.printStackTrace();
         } // end inner try catch
      } // end outer try catch finally
      
      return re;
   } // end selectUser()
   
   
   // 4. 회원 탈퇴(회원 탈퇴 창에서 아이디, 비밀번호 일치 시 회원 탈퇴) / delete
   public int delete(String user_id, String user_pwd) {
      int re = -1;
      
      try {
         pt = con.prepareStatement("delete from student where user_id=? and user_pwd=?");
         pt.setString(1, user_id); // <= delete(String user_id) 여기에서 위에 user_id라서 user_id 넣음
         pt.setString(2, user_pwd); // <= delete(String user_pwd) 여기에서 위에 user_pwd라서 user_pwd 넣음
         re = pt.executeUpdate(); // 수정 쿼리문 성공후 성공한 레코드 행의 개수를 반환
         
      } catch(Exception e) {
         e.printStackTrace();
      } finally {
         dbClose(); // DB 닫기
      } // end try catch finally
      
      return re; // return타입을 -1로 받음. 참고하여 Mypage의 ActionListener 구현
   } // end delete()
   
   // 5. DB 닫기 기능 메서드(중복 코드를 줄이는 효과)
   public void dbClose() {
      try {
         if(rs != null) {
            rs.close();
         }
         if(st != null) {
            st.close();
         }
         if(pt != null) {
            pt.close();
         }
      } catch(Exception e) {
         System.out.println(e + "=> dbClose Failed");
      } // end try catch
   } // end dbClose()   
   
	/* 모든 레코드 조회
	 */
	public void subjectSelectAll(DefaultTableModel dt) {
		String sql = "select subject_name, subject_teacher, subject_room, subject_day, subject_time, subject_status\r\n" + 
				"from subject where subject_status like '완료'";
		try {
			st = con.createStatement();//쿼리문 수행할 st생성
			rs = st.executeQuery(sql);
			
			//DefaultTableModel에 있는 기존 데이터 지우기
			for(int i = 0; i < dt.getRowCount();) {
				dt.removeRow(0);
			}
			while(rs.next()) {//다음 레코드 행이 있다면 참
				Object[] data = {
					rs.getNString("subject_name"),	
					rs.getNString("subject_teacher"),	
					rs.getNString("subject_room"),	
					rs.getNString("subject_date"),	
					rs.getNString("subject_time"),	
					rs.getNString("subject_status")	
				};
				dt.addRow(data);//디폴트 테이블 모델에 레코드 추가
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbClose();
			try {
				
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
   
} // end MypageDAO